package com.seray.pork.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.seray.entity.Products;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PRODUCTS".
*/
public class ProductsDao extends AbstractDao<Products, Long> {

    public static final String TABLENAME = "PRODUCTS";

    /**
     * Properties of entity Products.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ProductId = new Property(1, String.class, "ProductId", false, "PRODUCT_ID");
        public final static Property ProductName = new Property(2, String.class, "ProductName", false, "PRODUCT_NAME");
        public final static Property PluCode = new Property(3, String.class, "PluCode", false, "PLU_CODE");
        public final static Property CreatedAt = new Property(4, String.class, "CreatedAt", false, "CREATED_AT");
        public final static Property StatusCode = new Property(5, int.class, "StatusCode", false, "STATUS_CODE");
        public final static Property Remark = new Property(6, String.class, "Remark", false, "REMARK");
        public final static Property ParentId = new Property(7, String.class, "ParentId", false, "PARENT_ID");
        public final static Property UnitPrice = new Property(8, float.class, "UnitPrice", false, "UNIT_PRICE");
        public final static Property Unit = new Property(9, String.class, "Unit", false, "UNIT");
    }


    public ProductsDao(DaoConfig config) {
        super(config);
    }
    
    public ProductsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PRODUCTS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"PRODUCT_ID\" TEXT," + // 1: ProductId
                "\"PRODUCT_NAME\" TEXT," + // 2: ProductName
                "\"PLU_CODE\" TEXT," + // 3: PluCode
                "\"CREATED_AT\" TEXT," + // 4: CreatedAt
                "\"STATUS_CODE\" INTEGER NOT NULL ," + // 5: StatusCode
                "\"REMARK\" TEXT," + // 6: Remark
                "\"PARENT_ID\" TEXT," + // 7: ParentId
                "\"UNIT_PRICE\" REAL NOT NULL ," + // 8: UnitPrice
                "\"UNIT\" TEXT);"); // 9: Unit
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PRODUCTS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Products entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String ProductId = entity.getProductId();
        if (ProductId != null) {
            stmt.bindString(2, ProductId);
        }
 
        String ProductName = entity.getProductName();
        if (ProductName != null) {
            stmt.bindString(3, ProductName);
        }
 
        String PluCode = entity.getPluCode();
        if (PluCode != null) {
            stmt.bindString(4, PluCode);
        }
 
        String CreatedAt = entity.getCreatedAt();
        if (CreatedAt != null) {
            stmt.bindString(5, CreatedAt);
        }
        stmt.bindLong(6, entity.getStatusCode());
 
        String Remark = entity.getRemark();
        if (Remark != null) {
            stmt.bindString(7, Remark);
        }
 
        String ParentId = entity.getParentId();
        if (ParentId != null) {
            stmt.bindString(8, ParentId);
        }
        stmt.bindDouble(9, entity.getUnitPrice());
 
        String Unit = entity.getUnit();
        if (Unit != null) {
            stmt.bindString(10, Unit);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Products entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String ProductId = entity.getProductId();
        if (ProductId != null) {
            stmt.bindString(2, ProductId);
        }
 
        String ProductName = entity.getProductName();
        if (ProductName != null) {
            stmt.bindString(3, ProductName);
        }
 
        String PluCode = entity.getPluCode();
        if (PluCode != null) {
            stmt.bindString(4, PluCode);
        }
 
        String CreatedAt = entity.getCreatedAt();
        if (CreatedAt != null) {
            stmt.bindString(5, CreatedAt);
        }
        stmt.bindLong(6, entity.getStatusCode());
 
        String Remark = entity.getRemark();
        if (Remark != null) {
            stmt.bindString(7, Remark);
        }
 
        String ParentId = entity.getParentId();
        if (ParentId != null) {
            stmt.bindString(8, ParentId);
        }
        stmt.bindDouble(9, entity.getUnitPrice());
 
        String Unit = entity.getUnit();
        if (Unit != null) {
            stmt.bindString(10, Unit);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Products readEntity(Cursor cursor, int offset) {
        Products entity = new Products( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // ProductId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // ProductName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // PluCode
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // CreatedAt
            cursor.getInt(offset + 5), // StatusCode
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // Remark
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // ParentId
            cursor.getFloat(offset + 8), // UnitPrice
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // Unit
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Products entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setProductId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setProductName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPluCode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCreatedAt(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setStatusCode(cursor.getInt(offset + 5));
        entity.setRemark(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setParentId(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setUnitPrice(cursor.getFloat(offset + 8));
        entity.setUnit(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Products entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Products entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Products entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
