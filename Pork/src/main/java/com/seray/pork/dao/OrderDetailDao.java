package com.seray.pork.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.seray.entity.OrderDetail;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ORDER_DETAIL".
*/
public class OrderDetailDao extends AbstractDao<OrderDetail, Long> {

    public static final String TABLENAME = "ORDER_DETAIL";

    /**
     * Properties of entity OrderDetail.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property OrderDetailId = new Property(1, String.class, "orderDetailId", false, "ORDER_DETAIL_ID");
        public final static Property ActualNumber = new Property(2, int.class, "actualNumber", false, "ACTUAL_NUMBER");
        public final static Property ActualWeight = new Property(3, float.class, "actualWeight", false, "ACTUAL_WEIGHT");
        public final static Property State = new Property(4, int.class, "state", false, "STATE");
        public final static Property OrderNumber = new Property(5, String.class, "orderNumber", false, "ORDER_NUMBER");
        public final static Property ProductName = new Property(6, String.class, "productName", false, "PRODUCT_NAME");
        public final static Property AlibraryName = new Property(7, String.class, "alibraryName", false, "ALIBRARY_NAME");
        public final static Property Weight = new Property(8, float.class, "weight", false, "WEIGHT");
        public final static Property Number = new Property(9, int.class, "number", false, "NUMBER");
        public final static Property OrderDate = new Property(10, String.class, "orderDate", false, "ORDER_DATE");
        public final static Property BarCode = new Property(11, String.class, "barCode", false, "BAR_CODE");
        public final static Property Price = new Property(12, float.class, "price", false, "PRICE");
        public final static Property DiscountPrice = new Property(13, float.class, "discountPrice", false, "DISCOUNT_PRICE");
        public final static Property Amount = new Property(14, float.class, "amount", false, "AMOUNT");
    }


    public OrderDetailDao(DaoConfig config) {
        super(config);
    }
    
    public OrderDetailDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ORDER_DETAIL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"ORDER_DETAIL_ID\" TEXT," + // 1: orderDetailId
                "\"ACTUAL_NUMBER\" INTEGER NOT NULL ," + // 2: actualNumber
                "\"ACTUAL_WEIGHT\" REAL NOT NULL ," + // 3: actualWeight
                "\"STATE\" INTEGER NOT NULL ," + // 4: state
                "\"ORDER_NUMBER\" TEXT," + // 5: orderNumber
                "\"PRODUCT_NAME\" TEXT," + // 6: productName
                "\"ALIBRARY_NAME\" TEXT," + // 7: alibraryName
                "\"WEIGHT\" REAL NOT NULL ," + // 8: weight
                "\"NUMBER\" INTEGER NOT NULL ," + // 9: number
                "\"ORDER_DATE\" TEXT," + // 10: orderDate
                "\"BAR_CODE\" TEXT," + // 11: barCode
                "\"PRICE\" REAL NOT NULL ," + // 12: price
                "\"DISCOUNT_PRICE\" REAL NOT NULL ," + // 13: discountPrice
                "\"AMOUNT\" REAL NOT NULL );"); // 14: amount
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ORDER_DETAIL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, OrderDetail entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String orderDetailId = entity.getOrderDetailId();
        if (orderDetailId != null) {
            stmt.bindString(2, orderDetailId);
        }
        stmt.bindLong(3, entity.getActualNumber());
        stmt.bindDouble(4, entity.getActualWeight());
        stmt.bindLong(5, entity.getState());
 
        String orderNumber = entity.getOrderNumber();
        if (orderNumber != null) {
            stmt.bindString(6, orderNumber);
        }
 
        String productName = entity.getProductName();
        if (productName != null) {
            stmt.bindString(7, productName);
        }
 
        String alibraryName = entity.getAlibraryName();
        if (alibraryName != null) {
            stmt.bindString(8, alibraryName);
        }
        stmt.bindDouble(9, entity.getWeight());
        stmt.bindLong(10, entity.getNumber());
 
        String orderDate = entity.getOrderDate();
        if (orderDate != null) {
            stmt.bindString(11, orderDate);
        }
 
        String barCode = entity.getBarCode();
        if (barCode != null) {
            stmt.bindString(12, barCode);
        }
        stmt.bindDouble(13, entity.getPrice());
        stmt.bindDouble(14, entity.getDiscountPrice());
        stmt.bindDouble(15, entity.getAmount());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, OrderDetail entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String orderDetailId = entity.getOrderDetailId();
        if (orderDetailId != null) {
            stmt.bindString(2, orderDetailId);
        }
        stmt.bindLong(3, entity.getActualNumber());
        stmt.bindDouble(4, entity.getActualWeight());
        stmt.bindLong(5, entity.getState());
 
        String orderNumber = entity.getOrderNumber();
        if (orderNumber != null) {
            stmt.bindString(6, orderNumber);
        }
 
        String productName = entity.getProductName();
        if (productName != null) {
            stmt.bindString(7, productName);
        }
 
        String alibraryName = entity.getAlibraryName();
        if (alibraryName != null) {
            stmt.bindString(8, alibraryName);
        }
        stmt.bindDouble(9, entity.getWeight());
        stmt.bindLong(10, entity.getNumber());
 
        String orderDate = entity.getOrderDate();
        if (orderDate != null) {
            stmt.bindString(11, orderDate);
        }
 
        String barCode = entity.getBarCode();
        if (barCode != null) {
            stmt.bindString(12, barCode);
        }
        stmt.bindDouble(13, entity.getPrice());
        stmt.bindDouble(14, entity.getDiscountPrice());
        stmt.bindDouble(15, entity.getAmount());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public OrderDetail readEntity(Cursor cursor, int offset) {
        OrderDetail entity = new OrderDetail( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // orderDetailId
            cursor.getInt(offset + 2), // actualNumber
            cursor.getFloat(offset + 3), // actualWeight
            cursor.getInt(offset + 4), // state
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // orderNumber
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // productName
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // alibraryName
            cursor.getFloat(offset + 8), // weight
            cursor.getInt(offset + 9), // number
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // orderDate
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // barCode
            cursor.getFloat(offset + 12), // price
            cursor.getFloat(offset + 13), // discountPrice
            cursor.getFloat(offset + 14) // amount
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, OrderDetail entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setOrderDetailId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setActualNumber(cursor.getInt(offset + 2));
        entity.setActualWeight(cursor.getFloat(offset + 3));
        entity.setState(cursor.getInt(offset + 4));
        entity.setOrderNumber(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setProductName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setAlibraryName(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setWeight(cursor.getFloat(offset + 8));
        entity.setNumber(cursor.getInt(offset + 9));
        entity.setOrderDate(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setBarCode(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setPrice(cursor.getFloat(offset + 12));
        entity.setDiscountPrice(cursor.getFloat(offset + 13));
        entity.setAmount(cursor.getFloat(offset + 14));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(OrderDetail entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(OrderDetail entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(OrderDetail entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
