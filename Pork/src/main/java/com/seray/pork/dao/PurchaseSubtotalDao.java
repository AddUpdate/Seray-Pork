package com.seray.pork.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.seray.entity.PurchaseSubtotal;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PURCHASE_SUBTOTAL".
*/
public class PurchaseSubtotalDao extends AbstractDao<PurchaseSubtotal, Long> {

    public static final String TABLENAME = "PURCHASE_SUBTOTAL";

    /**
     * Properties of entity PurchaseSubtotal.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Supplier = new Property(1, String.class, "supplier", false, "SUPPLIER");
        public final static Property BatchNumber = new Property(2, String.class, "batchNumber", false, "BATCH_NUMBER");
        public final static Property Tel = new Property(3, String.class, "tel", false, "TEL");
        public final static Property StockDate = new Property(4, String.class, "stockDate", false, "STOCK_DATE");
        public final static Property PurOrderImg = new Property(5, String.class, "purOrderImg", false, "PUR_ORDER_IMG");
        public final static Property DetailsNumber = new Property(6, int.class, "detailsNumber", false, "DETAILS_NUMBER");
        public final static Property Remark = new Property(7, String.class, "remark", false, "REMARK");
    }


    public PurchaseSubtotalDao(DaoConfig config) {
        super(config);
    }
    
    public PurchaseSubtotalDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PURCHASE_SUBTOTAL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"SUPPLIER\" TEXT," + // 1: supplier
                "\"BATCH_NUMBER\" TEXT UNIQUE ," + // 2: batchNumber
                "\"TEL\" TEXT," + // 3: tel
                "\"STOCK_DATE\" TEXT," + // 4: stockDate
                "\"PUR_ORDER_IMG\" TEXT," + // 5: purOrderImg
                "\"DETAILS_NUMBER\" INTEGER NOT NULL ," + // 6: detailsNumber
                "\"REMARK\" TEXT);"); // 7: remark
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PURCHASE_SUBTOTAL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PurchaseSubtotal entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String supplier = entity.getSupplier();
        if (supplier != null) {
            stmt.bindString(2, supplier);
        }
 
        String batchNumber = entity.getBatchNumber();
        if (batchNumber != null) {
            stmt.bindString(3, batchNumber);
        }
 
        String tel = entity.getTel();
        if (tel != null) {
            stmt.bindString(4, tel);
        }
 
        String stockDate = entity.getStockDate();
        if (stockDate != null) {
            stmt.bindString(5, stockDate);
        }
 
        String purOrderImg = entity.getPurOrderImg();
        if (purOrderImg != null) {
            stmt.bindString(6, purOrderImg);
        }
        stmt.bindLong(7, entity.getDetailsNumber());
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(8, remark);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PurchaseSubtotal entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String supplier = entity.getSupplier();
        if (supplier != null) {
            stmt.bindString(2, supplier);
        }
 
        String batchNumber = entity.getBatchNumber();
        if (batchNumber != null) {
            stmt.bindString(3, batchNumber);
        }
 
        String tel = entity.getTel();
        if (tel != null) {
            stmt.bindString(4, tel);
        }
 
        String stockDate = entity.getStockDate();
        if (stockDate != null) {
            stmt.bindString(5, stockDate);
        }
 
        String purOrderImg = entity.getPurOrderImg();
        if (purOrderImg != null) {
            stmt.bindString(6, purOrderImg);
        }
        stmt.bindLong(7, entity.getDetailsNumber());
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(8, remark);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PurchaseSubtotal readEntity(Cursor cursor, int offset) {
        PurchaseSubtotal entity = new PurchaseSubtotal( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // supplier
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // batchNumber
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // tel
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // stockDate
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // purOrderImg
            cursor.getInt(offset + 6), // detailsNumber
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // remark
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PurchaseSubtotal entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSupplier(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBatchNumber(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTel(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setStockDate(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPurOrderImg(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDetailsNumber(cursor.getInt(offset + 6));
        entity.setRemark(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PurchaseSubtotal entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PurchaseSubtotal entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PurchaseSubtotal entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
