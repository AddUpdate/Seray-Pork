package com.seray.pork.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.seray.entity.Supplier;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SUPPLIER".
*/
public class SupplierDao extends AbstractDao<Supplier, Long> {

    public static final String TABLENAME = "SUPPLIER";

    /**
     * Properties of entity Supplier.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property SupplierId = new Property(1, String.class, "SupplierId", false, "SUPPLIER_ID");
        public final static Property SupplierName = new Property(2, String.class, "SupplierName", false, "SUPPLIER_NAME");
        public final static Property SupplierAddress = new Property(3, String.class, "SupplierAddress", false, "SUPPLIER_ADDRESS");
        public final static Property SupplierPhone = new Property(4, String.class, "SupplierPhone", false, "SUPPLIER_PHONE");
    }


    public SupplierDao(DaoConfig config) {
        super(config);
    }
    
    public SupplierDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SUPPLIER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"SUPPLIER_ID\" TEXT," + // 1: SupplierId
                "\"SUPPLIER_NAME\" TEXT," + // 2: SupplierName
                "\"SUPPLIER_ADDRESS\" TEXT," + // 3: SupplierAddress
                "\"SUPPLIER_PHONE\" TEXT);"); // 4: SupplierPhone
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SUPPLIER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Supplier entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String SupplierId = entity.getSupplierId();
        if (SupplierId != null) {
            stmt.bindString(2, SupplierId);
        }
 
        String SupplierName = entity.getSupplierName();
        if (SupplierName != null) {
            stmt.bindString(3, SupplierName);
        }
 
        String SupplierAddress = entity.getSupplierAddress();
        if (SupplierAddress != null) {
            stmt.bindString(4, SupplierAddress);
        }
 
        String SupplierPhone = entity.getSupplierPhone();
        if (SupplierPhone != null) {
            stmt.bindString(5, SupplierPhone);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Supplier entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String SupplierId = entity.getSupplierId();
        if (SupplierId != null) {
            stmt.bindString(2, SupplierId);
        }
 
        String SupplierName = entity.getSupplierName();
        if (SupplierName != null) {
            stmt.bindString(3, SupplierName);
        }
 
        String SupplierAddress = entity.getSupplierAddress();
        if (SupplierAddress != null) {
            stmt.bindString(4, SupplierAddress);
        }
 
        String SupplierPhone = entity.getSupplierPhone();
        if (SupplierPhone != null) {
            stmt.bindString(5, SupplierPhone);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Supplier readEntity(Cursor cursor, int offset) {
        Supplier entity = new Supplier( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // SupplierId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // SupplierName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // SupplierAddress
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // SupplierPhone
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Supplier entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSupplierId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSupplierName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSupplierAddress(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSupplierPhone(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Supplier entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Supplier entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Supplier entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
