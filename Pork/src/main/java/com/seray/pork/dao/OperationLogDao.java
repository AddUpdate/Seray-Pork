package com.seray.pork.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.seray.entity.OperationLog;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "OPERATION_LOG".
*/
public class OperationLogDao extends AbstractDao<OperationLog, Long> {

    public static final String TABLENAME = "OPERATION_LOG";

    /**
     * Properties of entity OperationLog.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ComeLibraryId = new Property(1, String.class, "comeLibraryId", false, "COME_LIBRARY_ID");
        public final static Property ComeLibraryName = new Property(2, String.class, "comeLibraryName", false, "COME_LIBRARY_NAME");
        public final static Property GoLibraryId = new Property(3, String.class, "goLibraryId", false, "GO_LIBRARY_ID");
        public final static Property ProductName = new Property(4, String.class, "productName", false, "PRODUCT_NAME");
        public final static Property Plu = new Property(5, String.class, "plu", false, "PLU");
        public final static Property Weight = new Property(6, float.class, "weight", false, "WEIGHT");
        public final static Property Number = new Property(7, int.class, "number", false, "NUMBER");
        public final static Property Unit = new Property(8, String.class, "unit", false, "UNIT");
        public final static Property Date = new Property(9, String.class, "date", false, "DATE");
        public final static Property State = new Property(10, int.class, "state", false, "STATE");
    }


    public OperationLogDao(DaoConfig config) {
        super(config);
    }
    
    public OperationLogDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"OPERATION_LOG\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"COME_LIBRARY_ID\" TEXT," + // 1: comeLibraryId
                "\"COME_LIBRARY_NAME\" TEXT," + // 2: comeLibraryName
                "\"GO_LIBRARY_ID\" TEXT," + // 3: goLibraryId
                "\"PRODUCT_NAME\" TEXT," + // 4: productName
                "\"PLU\" TEXT," + // 5: plu
                "\"WEIGHT\" REAL NOT NULL ," + // 6: weight
                "\"NUMBER\" INTEGER NOT NULL ," + // 7: number
                "\"UNIT\" TEXT," + // 8: unit
                "\"DATE\" TEXT," + // 9: date
                "\"STATE\" INTEGER NOT NULL );"); // 10: state
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"OPERATION_LOG\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, OperationLog entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String comeLibraryId = entity.getComeLibraryId();
        if (comeLibraryId != null) {
            stmt.bindString(2, comeLibraryId);
        }
 
        String comeLibraryName = entity.getComeLibraryName();
        if (comeLibraryName != null) {
            stmt.bindString(3, comeLibraryName);
        }
 
        String goLibraryId = entity.getGoLibraryId();
        if (goLibraryId != null) {
            stmt.bindString(4, goLibraryId);
        }
 
        String productName = entity.getProductName();
        if (productName != null) {
            stmt.bindString(5, productName);
        }
 
        String plu = entity.getPlu();
        if (plu != null) {
            stmt.bindString(6, plu);
        }
        stmt.bindDouble(7, entity.getWeight());
        stmt.bindLong(8, entity.getNumber());
 
        String unit = entity.getUnit();
        if (unit != null) {
            stmt.bindString(9, unit);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(10, date);
        }
        stmt.bindLong(11, entity.getState());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, OperationLog entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String comeLibraryId = entity.getComeLibraryId();
        if (comeLibraryId != null) {
            stmt.bindString(2, comeLibraryId);
        }
 
        String comeLibraryName = entity.getComeLibraryName();
        if (comeLibraryName != null) {
            stmt.bindString(3, comeLibraryName);
        }
 
        String goLibraryId = entity.getGoLibraryId();
        if (goLibraryId != null) {
            stmt.bindString(4, goLibraryId);
        }
 
        String productName = entity.getProductName();
        if (productName != null) {
            stmt.bindString(5, productName);
        }
 
        String plu = entity.getPlu();
        if (plu != null) {
            stmt.bindString(6, plu);
        }
        stmt.bindDouble(7, entity.getWeight());
        stmt.bindLong(8, entity.getNumber());
 
        String unit = entity.getUnit();
        if (unit != null) {
            stmt.bindString(9, unit);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(10, date);
        }
        stmt.bindLong(11, entity.getState());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public OperationLog readEntity(Cursor cursor, int offset) {
        OperationLog entity = new OperationLog( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // comeLibraryId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // comeLibraryName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // goLibraryId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // productName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // plu
            cursor.getFloat(offset + 6), // weight
            cursor.getInt(offset + 7), // number
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // unit
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // date
            cursor.getInt(offset + 10) // state
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, OperationLog entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setComeLibraryId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setComeLibraryName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setGoLibraryId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setProductName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPlu(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setWeight(cursor.getFloat(offset + 6));
        entity.setNumber(cursor.getInt(offset + 7));
        entity.setUnit(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setDate(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setState(cursor.getInt(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(OperationLog entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(OperationLog entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(OperationLog entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
