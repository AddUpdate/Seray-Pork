package com.seray.pork.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.seray.entity.Library;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LIBRARY".
*/
public class LibraryDao extends AbstractDao<Library, Long> {

    public static final String TABLENAME = "LIBRARY";

    /**
     * Properties of entity Library.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property LibraryId = new Property(1, String.class, "LibraryId", false, "LIBRARY_ID");
        public final static Property LibraryName = new Property(2, String.class, "LibraryName", false, "LIBRARY_NAME");
        public final static Property Type = new Property(3, int.class, "Type", false, "TYPE");
        public final static Property State = new Property(4, String.class, "State", false, "STATE");
    }


    public LibraryDao(DaoConfig config) {
        super(config);
    }
    
    public LibraryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LIBRARY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"LIBRARY_ID\" TEXT," + // 1: LibraryId
                "\"LIBRARY_NAME\" TEXT," + // 2: LibraryName
                "\"TYPE\" INTEGER NOT NULL ," + // 3: Type
                "\"STATE\" TEXT);"); // 4: State
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LIBRARY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Library entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String LibraryId = entity.getLibraryId();
        if (LibraryId != null) {
            stmt.bindString(2, LibraryId);
        }
 
        String LibraryName = entity.getLibraryName();
        if (LibraryName != null) {
            stmt.bindString(3, LibraryName);
        }
        stmt.bindLong(4, entity.getType());
 
        String State = entity.getState();
        if (State != null) {
            stmt.bindString(5, State);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Library entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String LibraryId = entity.getLibraryId();
        if (LibraryId != null) {
            stmt.bindString(2, LibraryId);
        }
 
        String LibraryName = entity.getLibraryName();
        if (LibraryName != null) {
            stmt.bindString(3, LibraryName);
        }
        stmt.bindLong(4, entity.getType());
 
        String State = entity.getState();
        if (State != null) {
            stmt.bindString(5, State);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Library readEntity(Cursor cursor, int offset) {
        Library entity = new Library( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // LibraryId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // LibraryName
            cursor.getInt(offset + 3), // Type
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // State
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Library entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setLibraryId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLibraryName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setType(cursor.getInt(offset + 3));
        entity.setState(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Library entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Library entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Library entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
